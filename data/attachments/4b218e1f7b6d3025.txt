# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: CRUD e2e API positions - dev >> CRUD operations executed sequentially
- Location: /home/runner/work/nucleus-portal-tests/nucleus-portal-tests/tests/api/nucleusPortalAPI/crud-api_positions.spec.ts:10:9

# Error details

```
Error: expect(received).toBe(expected) // Object.is equality

Expected: 201
Received: 401
    at /home/runner/work/nucleus-portal-tests/nucleus-portal-tests/tests/api/nucleusPortalAPI/crud-api_positions.spec.ts:32:38
    at /home/runner/work/nucleus-portal-tests/nucleus-portal-tests/tests/api/nucleusPortalAPI/crud-api_positions.spec.ts:12:9
```

# Test source

```ts
   1 | import { expect, test } from '@playwright/test';
   2 | import { logResponse } from '../../../src/logger';
   3 | import config from '../../../playwright.config';
   4 |
   5 | test.describe(`CRUD e2e API positions - ${config.name}`, { tag: [`@${config.name}`] }, () => {
   6 |     let positionId: string;
   7 |     let positionName: string;
   8 |     let updatedPositionName: string;
   9 |
   10 |     test(`CRUD operations executed sequentially`, async ({ request }, testInfo) => {
   11 |         // Step 1: Create a New Position
   12 |         await test.step('Step 1: Create a New Position', async () => {
   13 |             positionName = `[QA] RoboPosition - ${crypto.randomUUID()}`;
   14 |
   15 |             const createResponse = await request.post(`https://${config.nucleusPortalServiceUri}/api/v1/positions`, {
   16 |                 headers: {
   17 |                     Authorization: `${config.nucleusPortalToken}`,
   18 |                     'Content-Type': 'application/json',
   19 |                 },
   20 |                 data: {
   21 |                     name: [
   22 |                         {
   23 |                             language: 'en',
   24 |                             text: positionName,
   25 |                         },
   26 |                     ],
   27 |                 },
   28 |             });
   29 |
   30 |             await logResponse(createResponse, testInfo, 'POST');
   31 |             const createStatusCode = createResponse.status();
>  32 |             expect(createStatusCode).toBe(201);
      |                                      ^ Error: expect(received).toBe(expected) // Object.is equality
   33 |
   34 |             const responseBody = await createResponse.json();
   35 |             positionId = responseBody._id; // Assuming `_id` is returned in the response
   36 |             expect(positionId).toBeTruthy();
   37 |             expect.soft(responseBody.name[0].text).toBe(positionName); // Verifying name with language
   38 |             console.log(`Created Position ID: ${positionId}`);
   39 |         });
   40 |
   41 |         // Step 2: Verify the created position appears in the list of all positions
   42 |         await test.step('Step 2: Verify the Position is in the list of all positions', async () => {
   43 |             const getAllResponse = await request.get(`https://${config.nucleusPortalServiceUri}/api/v1/positions?page=0&size=100&sortField=createdAt&sortOrder=desc&name=${positionName}`, {
   44 |                 headers: {
   45 |                     Authorization: `${config.nucleusPortalToken}`,
   46 |                 },
   47 |             });
   48 |
   49 |             await logResponse(getAllResponse, testInfo, 'GET');
   50 |             const getAllStatusCode = getAllResponse.status();
   51 |             expect(getAllStatusCode).toBe(200);
   52 |
   53 |             const responseBody = await getAllResponse.json();
   54 |
   55 |             expect.soft(responseBody[0]).toHaveProperty('_id', positionId);
   56 |         });
   57 |
   58 |         // Step 3: Verify the Created Position with GET
   59 |         await test.step('Step 3: Verify the Created Position with GET', async () => {
   60 |             const getCreatedResponse = await request.get(`https://${config.nucleusPortalServiceUri}/api/v1/positions/${positionId}`, {
   61 |                 headers: {
   62 |                     Authorization: `${config.nucleusPortalToken}`,
   63 |                 },
   64 |             });
   65 |
   66 |             await logResponse(getCreatedResponse, testInfo, 'GET');
   67 |             const getCreatedStatusCode = getCreatedResponse.status();
   68 |             expect(getCreatedStatusCode).toBe(200);
   69 |
   70 |             const getCreatedBody = await getCreatedResponse.json();
   71 |             expect.soft(getCreatedBody).toHaveProperty('_id', positionId);
   72 |             expect.soft(getCreatedBody.name[0]).toHaveProperty('text', positionName); // Verifying translated text
   73 |             expect.soft(getCreatedBody.name[0]).toHaveProperty('language', 'en'); // Verifying language
   74 |             console.log(`Verified Position via GET: ${positionId}`);
   75 |         });
   76 |
   77 |         // Step 4: Update the Position using PATCH
   78 |         await test.step('Step 4: Update the Position using PATCH', async () => {
   79 |             updatedPositionName = `${positionName} - Updated`;
   80 |
   81 |             const patchResponse = await request.patch(`https://${config.nucleusPortalServiceUri}/api/v1/positions/${positionId}`, {
   82 |                 headers: {
   83 |                     Authorization: `${config.nucleusPortalToken}`,
   84 |                     'Content-Type': 'application/json',
   85 |                 },
   86 |                 data: {
   87 |                     name: [
   88 |                         {
   89 |                             language: 'en',
   90 |                             text: updatedPositionName,
   91 |                         },
   92 |                     ],
   93 |                 },
   94 |             });
   95 |
   96 |             await logResponse(patchResponse, testInfo, 'PATCH');
   97 |             const patchStatusCode = patchResponse.status();
   98 |             expect(patchStatusCode).toBe(204);
   99 |
  100 |             console.log(`Updated Position Name via PATCH: ${updatedPositionName}`);
  101 |         });
  102 |
  103 |         // Step 5: Verify the Updated Position with GET
  104 |         await test.step('Step 5: Verify the Updated Position with GET', async () => {
  105 |             const getUpdatedResponse = await request.get(`https://${config.nucleusPortalServiceUri}/api/v1/positions/${positionId}`, {
  106 |                 headers: {
  107 |                     Authorization: `${config.nucleusPortalToken}`,
  108 |                 },
  109 |             });
  110 |
  111 |             await logResponse(getUpdatedResponse, testInfo, 'GET');
  112 |             const getUpdatedStatusCode = getUpdatedResponse.status();
  113 |             expect(getUpdatedStatusCode).toBe(200);
  114 |
  115 |             const getUpdatedBody = await getUpdatedResponse.json();
  116 |             expect(getUpdatedBody).toHaveProperty('_id', positionId);
  117 |             expect(getUpdatedBody.name[0]).toHaveProperty('text', updatedPositionName); // Verifying translated text
  118 |             expect(getUpdatedBody.name[0]).toHaveProperty('language', 'en'); // Verifying language
  119 |             console.log(`Verified Updated Position via GET: ${positionId}`);
  120 |         });
  121 |
  122 |         // Step 6: Delete the Position
  123 |         await test.step('Step 6: Delete the Position', async () => {
  124 |             const deleteResponse = await request.delete(`https://${config.nucleusPortalServiceUri}/api/v1/positions/${positionId}`, {
  125 |                 headers: {
  126 |                     Authorization: `${config.nucleusPortalToken}`,
  127 |                 },
  128 |             });
  129 |
  130 |             await logResponse(deleteResponse, testInfo, 'DELETE');
  131 |             const deleteStatusCode = deleteResponse.status();
  132 |             expect(deleteStatusCode).toBe(204);
```