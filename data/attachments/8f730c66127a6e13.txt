# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: SHORT REVIEWS subpage - staging  >> check the Multi Grid
- Location: /home/runner/work/nucleus-portal-tests/nucleus-portal-tests/tests/sanity/nucleus-portal/shortReviewsPage.spec.ts:53:9

# Error details

```
TimeoutError: locator.click: Timeout 8000ms exceeded.
Call log:
  - waiting for getByTestId('short-review-toplist-filter-autocomplete')

    at components.clickItemFromCombobox (/home/runner/work/nucleus-portal-tests/nucleus-portal-tests/tests/page-objects/components/components.ts:139:31)
    at /home/runner/work/nucleus-portal-tests/nucleus-portal-tests/tests/sanity/nucleus-portal/shortReviewsPage.spec.ts:54:26
```

# Page snapshot

```yaml
- button "Sign in with Google":
  - img
  - paragraph: Sign in with Google
- alert
```

# Test source

```ts
   39 |         "Tonga", "Turks and Caicos Islands", "Uganda", "United Arab Emirates", "United States Minor Outlying Islands",
   40 |         "Uzbekistan", "Vietnam", "Western Sahara", "Zimbabwe", "Afghanistan", "Algeria",
   41 |         "American Samoa", "Armenia", "Barbados", "Bermuda", "Bonaire, Sint Eustatius and Saba",
   42 |         "Burkina Faso", "Cayman Islands", "Chad", "Chile", "Egypt", "Equatorial Guinea",
   43 |         "Eritrea", "Falkland Islands (Malvinas)", "Faroe Islands", "French Southern Territories",
   44 |         "Gabon", "Ghana", "Grenada", "Guernsey", "Guinea-Bissau", "Guyana", "Haiti", "Hungary",
   45 |         "Indonesia", "Iran, Islamic Republic of", "Iraq", "Jamaica", "Jersey", "Jordan",
   46 |         "Lao People's Democratic Republic", "Liberia", "Lithuania", "Macedonia, the former Yugoslav Republic of",
   47 |         "Maldives", "Mauritania", "Mexico", "Micronesia, Federated States of", "Mozambique",
   48 |         "Netherlands", "New Caledonia", "Niue", "Norway", "Pakistan", "Palau", "Poland", "Russia",
   49 |         "Saint Barthélemy", "Saint Kitts and Nevis", "Samoa", "Senegal", "Slovakia", "Slovenia", "Somalia",
   50 |         "South Sudan", "Sri Lanka", "Switzerland", "Trinidad and Tobago", "Tunisia", "Turkey",
   51 |         "Ukraine", "United Kingdom", "United States", "Uruguay", "Vanuatu", "Anguilla",
   52 |         "Antigua and Barbuda", "Bolivia", "Brunei", "Bulgaria", "Cameroon", "Colombia",
   53 |         "Congo", "Denmark", "Dominican Republic", "Estonia", "Finland", "French Guiana",
   54 |         "French Polynesia", "Guadeloupe", "Holy See (Vatican City State)", "Hong Kong",
   55 |         "Ireland", "Italy", "Lebanon", "Libya", "Madagascar", "Moldova, Republic of",
   56 |         "Montenegro", "Montserrat", "Nauru", "Nigeria", "Oman", "Panama", "Papua New Guinea",
   57 |         "Saint Lucia", "Saint Pierre and Miquelon", "San Marino", "Sao Tome and Principe",
   58 |         "Saudi Arabia", "Serbia", "Seychelles", "South Africa", "Spain", "Taiwan", "Tajikistan",
   59 |         "Togo", "Tokelau", "Virgin Islands, U.S.", "Wallis and Futuna", "Yemen", "Zambia",
   60 |         "Åland Islands", "Albania", "Andorra", "Austria", "Azerbaijan", "Bahamas", "Bahrain",
   61 |         "Belgium", "Benin", "Bhutan", "Brazil", "Burundi", "Cape Verde", "Central African Republic",
   62 |         "Christmas Island", "Cocos (Keeling) Islands", "Cook Islands", "Costa Rica", "Croatia",
   63 |         "Cyprus", "Dominica", "El Salvador", "France", "Germany", "Greenland", "Guam", "Guatemala",
   64 |         "Guinea", "Heard Island and McDonald Islands", "Honduras", "Iceland", "India", "Isle of Man",
   65 |         "Israel", "Ivory Coast", "Japan", "Kazakhstan", "Kenya", "Korea, Democratic People's Republic of",
   66 |         "Latvia", "Liechtenstein", "Luxembourg", "Macao", "Malaysia", "Martinique", "Mauritius",
   67 |         "Mongolia", "Namibia", "New Zealand", "Nicaragua", "Northern Mariana Islands",
   68 |         "Palestinian Territory, Occupied", "Philippines", "Pitcairn", "Portugal", "Qatar", "Réunion",
   69 |         "Romania", "Rwanda", "Saint Vincent & the Grenadines", "Singapore", "Sint Maarten (Dutch part)",
   70 |         "Solomon Islands", "Svalbard and Jan Mayen", "Swaziland", "Timor-Leste", "Turkmenistan", "Tuvalu",
   71 |         "Venezuela", "Virgin Islands, British"
   72 |     ];
   73 |
   74 |     constructor(page: Page, context: BrowserContext, testInfo: TestInfo) {
   75 |         super(page, context);
   76 |         this.page = page;
   77 |         this.context = context;
   78 |         this.testInfo = testInfo;
   79 |         this.alertBanner = page.getByRole('alert').first();
   80 |         this.productCombobox = page.getByTestId('domain-id-select');
   81 |         this.countriesCombobox = page.getByTestId('country-code-select');
   82 |         this.verticalCombobox = page.getByTestId('type-select');
   83 |         this.subVerticalCombobox = page.getByTestId('sub-type-select');
   84 |         this.toplistAutomationCombobox = page.getByTestId('toplist-automation-select');
   85 |         this.dataGrid = page.locator('//div[contains(@class, "MuiDataGrid-root")]');
   86 |         this.dataGridRow = page.getByRole("row");
   87 |         this.rowsPerPageDropdown = page.locator("//p[.='Rows per page:']/..//*[@role='combobox']");
   88 |         this.nextPageButton = page.locator("//button[@aria-label='Go to next page']");
   89 |         this.previousPageButton = page.locator("//button[@aria-label='Go to previous page']");
   90 |         this.displayedRowsLabel = page.locator("//p[contains(@class, 'MuiTablePagination-displayedRows')]");
   91 |         this.newButton = page.locator("//button[@aria-label='New']");
   92 |         this.divider = page.getByRole('separator');
   93 |         this.dropdownHeader = (headerName: string) => page.locator(`div[data-testid='${headerName}']`);
   94 |         this.chipButton = (label: string) => page.getByRole("button").locator(`//*[contains(text(),'${label}')]`);
   95 |         this.chipButtonCloseX = (label: string) =>
   96 |             this.page.locator(`//*[contains(text(),'${label}')]/..//*[@data-testid='CancelIcon']`);
   97 |     }
   98 |
   99 |     dataGridCell(column: string, rowNumber: number): Locator {
  100 |         return this.page.locator(`//div[@data-rowindex="${rowNumber - 1}"]//div[@data-field="${column}"]`)
  101 |     }
  102 |
  103 |     async dblClickDataGridRow(rowNumber: number): Promise<void> {
  104 |         const dataGridRow = this.page.locator(`//div[@data-rowindex="${rowNumber - 1}"]`);
  105 |         await expect(this.dataGrid.locator(dataGridRow)).toBeVisible();
  106 |         await this.dataGrid.locator(dataGridRow).dblclick();
  107 |     }
  108 |
  109 |     async checkAlertBanner(bannerText: string) {
  110 |         await expect(this.alertBanner, `Alert banner should contain text :"${bannerText}"`).toContainText(bannerText);
  111 |     }
  112 |
  113 |
  114 |     async checkCombobox(comboboxLocator: Locator, expectedItems: string[]): Promise<void> {
  115 |         await comboboxLocator.click();
  116 |         for (const item of expectedItems) {
  117 |             await comboboxLocator.locator("input").fill(item);
  118 |             const itemLocator: Locator = this.page.getByRole('option', {name: item, exact: true})
  119 |             await expect(itemLocator).toContainText(item);
  120 |             await itemLocator.click({trial: true});
  121 |             await comboboxLocator.locator("input").clear();
  122 |         }
  123 |         await this.page.keyboard.press('Escape');
  124 |     }
  125 |
  126 |
  127 |     async clearCombobox(comboboxLocator: Locator): Promise<void> {
  128 |         await comboboxLocator.click();
  129 |         const closeIcon = comboboxLocator.getByTestId("CloseIcon");
  130 |         if (await closeIcon.isVisible()) {
  131 |             await closeIcon.click();
  132 |         }
  133 |         await this.page.keyboard.press('Escape');
  134 |     }
  135 |
  136 |
  137 |     async clickItemFromCombobox(comboboxLocator: Locator, items: string[], exact: boolean = true
  138 |     ): Promise<void> {
> 139 |         await comboboxLocator.click();
      |                               ^ TimeoutError: locator.click: Timeout 8000ms exceeded.
  140 |         for (const item of items) {
  141 |             await comboboxLocator.locator("input").fill(item);
  142 |             await this.page.waitForLoadState();
  143 |             const itemLocator: Locator = this.page.getByRole('option', {name: item, exact: exact});
  144 |             await itemLocator.click();
  145 |         }
  146 |         await this.page.keyboard.press('Escape');
  147 |     }
  148 |
  149 |     async selectFromDropdown(comboboxLocator: Locator, item: string): Promise<void> {
  150 |         await comboboxLocator.click();
  151 |         const itemLocator: Locator = this.page.getByRole('option', {name: item, exact: true})
  152 |         await itemLocator.click();
  153 |     }
  154 |
  155 |     async checkRowsInDataGrid(rowsCount: number, dataGridCells: string[]) {
  156 |         await this.selectFromDropdown(this.rowsPerPageDropdown, rowsCount.toString());
  157 |
  158 |         for (let row = 1; row <= rowsCount; row++) {
  159 |             for (const cell of dataGridCells) {
  160 |                 await this.dataGridCell(cell, row).click({trial: true});
  161 |             }
  162 |         }
  163 |     }
  164 |
  165 |     async checkDividers(dividersLabels: string[]) {
  166 |         for (const dividerLabel of dividersLabels) {
  167 |             const dividerLocator = this.divider.and(this.page.locator(`//*[.='${dividerLabel}']`));
  168 |             await dividerLocator.scrollIntoViewIfNeeded();
  169 |             await expect(dividerLocator).toBeVisible();
  170 |         }
  171 |     }
  172 |
  173 |     //check if the element contains all the strings
  174 |     async elementContainsLabels(elementLocator: Locator, labels: string[]) {
  175 |         for (const label of labels) {
  176 |             await expect(elementLocator, `Element should contain text:"${label}"`).toContainText(label);
  177 |         }
  178 |     }
  179 |
  180 |     async openDropdown(headerName: string) {
  181 |         await this.dropdownHeader(headerName).click();
  182 |     }
  183 | }
  184 |
  185 |
  186 |
```