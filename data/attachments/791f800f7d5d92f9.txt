# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: CRUD e2e API licenses - dev >> CRUD operations executed sequentially
- Location: /home/runner/work/nucleus-portal-tests/nucleus-portal-tests/tests/api/nucleusPortalAPI/crud_api_licenses_.spec.ts:11:9

# Error details

```
Error: expect(received).toBe(expected) // Object.is equality

Expected: 201
Received: 401
    at /home/runner/work/nucleus-portal-tests/nucleus-portal-tests/tests/api/nucleusPortalAPI/crud_api_licenses_.spec.ts:35:38
    at /home/runner/work/nucleus-portal-tests/nucleus-portal-tests/tests/api/nucleusPortalAPI/crud_api_licenses_.spec.ts:13:9
```

# Test source

```ts
   1 | import { expect, test } from '@playwright/test';
   2 | import { logResponse } from '../../../src/logger';
   3 | import config from '../../../playwright.config';
   4 |
   5 | test.describe(`CRUD e2e API licenses - ${config.name}`, { tag: [`@${config.name}`] }, () => {
   6 |     let licenseId: string;
   7 |     let licenseName: string;
   8 |     let updatedLicenseName: string;
   9 |     let logo: string;
   10 |
   11 |     test(`CRUD operations executed sequentially`, async ({ request }, testInfo) => {
   12 |         // Step 1: Create a New License
   13 |         await test.step('Step 1: Create a New License', async () => {
   14 |             licenseName = `[QA] RoboLicense - ${crypto.randomUUID()}`;
   15 |             logo = `logo_${Math.floor(Math.random() * 1000)}`; // Example logo placeholder
   16 |
   17 |             const createResponse = await request.post(`https://${config.nucleusPortalServiceUri}/api/v1/licenses`, {
   18 |                 headers: {
   19 |                     Authorization: `${config.nucleusPortalToken}`,
   20 |                     'Content-Type': 'application/json',
   21 |                 },
   22 |                 data: {
   23 |                     name: [
   24 |                         {
   25 |                             language: 'en',
   26 |                             text: licenseName,
   27 |                         },
   28 |                     ],
   29 |                     logo: logo,
   30 |                 },
   31 |             });
   32 |
   33 |             await logResponse(createResponse, testInfo, 'POST');
   34 |             const createStatusCode = createResponse.status();
>  35 |             expect(createStatusCode).toBe(201);
      |                                      ^ Error: expect(received).toBe(expected) // Object.is equality
   36 |
   37 |             const responseBody = await createResponse.json();
   38 |             licenseId = responseBody._id; // Assuming `_id` is returned in the response
   39 |             expect(licenseId).toBeTruthy();
   40 |             expect.soft(responseBody.name[0].text).toBe(licenseName); // Verifying name with language
   41 |             console.log(`Created License ID: ${licenseId}`);
   42 |         });
   43 |
   44 |         // Step 2: Verify the created license appears in the list of all licenses
   45 |         await test.step('Step 2: Verify the License is in the list of all licenses', async () => {
   46 |             const getAllResponse = await request.get(`https://${config.nucleusPortalServiceUri}/api/v1/licenses?name=${licenseName}`, {
   47 |                 headers: {
   48 |                     Authorization: `${config.nucleusPortalToken}`,
   49 |                 },
   50 |             });
   51 |
   52 |             await logResponse(getAllResponse, testInfo, 'GET');
   53 |             const getAllStatusCode = getAllResponse.status();
   54 |             expect(getAllStatusCode).toBe(200);
   55 |
   56 |             const responseBody = await getAllResponse.json();
   57 |             expect.soft(responseBody[0]).toHaveProperty('_id', licenseId);
   58 |         });
   59 |
   60 |         // Step 3: Verify the Created License with GET
   61 |         await test.step('Step 3: Verify the Created License with GET', async () => {
   62 |             const getCreatedResponse = await request.get(`https://${config.nucleusPortalServiceUri}/api/v1/licenses/${licenseId}`, {
   63 |                 headers: {
   64 |                     Authorization: `${config.nucleusPortalToken}`,
   65 |                 },
   66 |             });
   67 |
   68 |             await logResponse(getCreatedResponse, testInfo, 'GET');
   69 |             expect(getCreatedResponse.status()).toBe(200);
   70 |
   71 |             const getCreatedBody = await getCreatedResponse.json();
   72 |             expect.soft(getCreatedBody).toHaveProperty('_id', licenseId);
   73 |             expect.soft(getCreatedBody.name[0]).toHaveProperty('text', licenseName); // Verifying translated text
   74 |             expect.soft(getCreatedBody.name[0]).toHaveProperty('language', 'en'); // Verifying language
   75 |             expect.soft(getCreatedBody).toHaveProperty('logo', logo);
   76 |             console.log(`Verified License via GET: ${licenseId}`);
   77 |         });
   78 |
   79 |         // Step 4: Update the License using PATCH
   80 |         await test.step('Step 4: Update the License using PATCH', async () => {
   81 |             updatedLicenseName = `${licenseName} - Updated`;
   82 |
   83 |             const patchResponse = await request.patch(`https://${config.nucleusPortalServiceUri}/api/v1/licenses/${licenseId}`, {
   84 |                 headers: {
   85 |                     Authorization: `${config.nucleusPortalToken}`,
   86 |                     'Content-Type': 'application/json',
   87 |                 },
   88 |                 data: {
   89 |                     name: [
   90 |                         {
   91 |                             language: 'en',
   92 |                             text: updatedLicenseName,
   93 |                         },
   94 |                     ],
   95 |                     logo: `${logo}_updated`, // Updated logo
   96 |                 },
   97 |             });
   98 |
   99 |             await logResponse(patchResponse, testInfo, 'PATCH');
  100 |             const patchStatusCode = patchResponse.status();
  101 |             expect(patchStatusCode).toBe(204);
  102 |
  103 |             console.log(`Updated License Name via PATCH: ${updatedLicenseName}`);
  104 |         });
  105 |
  106 |         // Step 5: Verify the Updated License with GET
  107 |         await test.step('Step 5: Verify the Updated License with GET', async () => {
  108 |             const getUpdatedResponse = await request.get(`https://${config.nucleusPortalServiceUri}/api/v1/licenses/${licenseId}`, {
  109 |                 headers: {
  110 |                     Authorization: `${config.nucleusPortalToken}`,
  111 |                 },
  112 |             });
  113 |
  114 |             await logResponse(getUpdatedResponse, testInfo, 'GET');
  115 |             const getUpdatedStatusCode = getUpdatedResponse.status();
  116 |             expect(getUpdatedStatusCode).toBe(200);
  117 |
  118 |             const getUpdatedBody = await getUpdatedResponse.json();
  119 |             expect(getUpdatedBody).toHaveProperty('_id', licenseId);
  120 |             expect(getUpdatedBody.name[0]).toHaveProperty('text', updatedLicenseName); // Verifying translated text
  121 |             expect(getUpdatedBody).toHaveProperty('logo', `${logo}_updated`);
  122 |             console.log(`Verified Updated License via GET: ${licenseId}`);
  123 |         });
  124 |
  125 |         // Step 6: Delete the License
  126 |         await test.step('Step 6: Delete the License', async () => {
  127 |             const deleteResponse = await request.delete(`https://${config.nucleusPortalServiceUri}/api/v1/licenses/${licenseId}`, {
  128 |                 headers: {
  129 |                     Authorization: `${config.nucleusPortalToken}`,
  130 |                 },
  131 |             });
  132 |
  133 |             await logResponse(deleteResponse, testInfo, 'DELETE');
  134 |             const deleteStatusCode = deleteResponse.status();
  135 |             expect(deleteStatusCode).toBe(204);
```