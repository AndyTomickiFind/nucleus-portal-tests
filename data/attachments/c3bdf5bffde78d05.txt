# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: authenticate
- Location: /home/runner/work/nucleus-portal-tests/nucleus-portal-tests/tests/auth.setup.ts:9:6

# Error details

```
TimeoutError: locator.fill: Timeout 8000ms exceeded.
Call log:
  - waiting for locator('input[type="password"]').first()
    - locator resolved to <input class="Hvu6D" tabindex="-1" type="password" jsname="RHeR4d" aria-hidden="true" spellcheck="false" name="hiddenPassword"/>
    - fill("gtS2t")
  - attempting fill action
    2 × waiting for element to be visible, enabled and editable
      - element is not visible
    - retrying fill action
    - waiting 20ms
    2 × waiting for element to be visible, enabled and editable
      - element is not visible
    - retrying fill action
      - waiting 100ms
    15 × waiting for element to be visible, enabled and editable
       - element is not visible
     - retrying fill action
       - waiting 500ms

    at /home/runner/work/nucleus-portal-tests/nucleus-portal-tests/tests/auth.setup.ts:22:25
```

# Page snapshot

```yaml
- text: Sign in with Google
- heading "Sign in" [level=1]
- text: to continue to
- button "nucleusmvp.com"
- textbox "Email or phone": qa_nucleus_admin@find.co
- button "Forgot email?"
- img "CAPTCHA image of text used to distinguish humans from robots"
- button "Listen and type the numbers you hear"
- textbox "Type the text you hear or see"
- button "Next"
- button "Create account"
- contentinfo:
  - combobox "English (United States)"
  - list:
    - listitem:
      - link "Help"
    - listitem:
      - link "Privacy"
    - listitem:
      - link "Terms"
```

# Test source

```ts
   1 | import {test as setup} from '@playwright/test';
   2 | import * as path from "node:path";
   3 | import config from "../playwright.config";
   4 | import {getOTP} from "./totpGenerator";
   5 |
   6 |
   7 | const authFile = path.join(__dirname, '../playwright/.auth/user.json');
   8 |
   9 | setup('authenticate', async ({page}) => {
  10 |     await page.setExtraHTTPHeaders({
  11 |         "x-tooling-bypass-auth": process.env.BYPASS_AUTH,
  12 |     });
  13 |
  14 |     await page.goto(`https://${config.baseUrl}/login`);
  15 |     await page.locator('//button').click(); //login with Google button
  16 |     await page.fill('input[type="email"]', config.use.httpCredentials.username);
  17 |     await page.click('#identifierNext');
  18 |
  19 |     const passwordInput = page.locator('input[type="password"]').first();
  20 |
  21 |     await page.waitForTimeout(1000);
> 22 |     await passwordInput.fill(config.use.httpCredentials.password);
     |                         ^ TimeoutError: locator.fill: Timeout 8000ms exceeded.
  23 |     await page.waitForTimeout(500);
  24 |     await page.click('#passwordNext');
  25 |     await page.waitForLoadState();
  26 |     await page.addLocatorHandler(
  27 |         page.locator("//span[.='Try another way']"),
  28 |         async () => {
  29 |             await page.locator("//span[.='Try another way']").click();
  30 |             await page.locator("//div[.='Get a verification code from the Google Authenticator app']").first().click();
  31 |             const otp = await getOTP();
  32 |             await page.getByLabel("Enter code").fill(otp);
  33 |             await page.getByLabel("Enter code").press("Enter");
  34 |         }
  35 |     );
  36 |     await page.waitForLoadState();
  37 |     await page.waitForSelector('//*[.="Hello Nucleus"]');
  38 |     await page.context().storageState({path: authFile});
  39 |
  40 | });
  41 |
```