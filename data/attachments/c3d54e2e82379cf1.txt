# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: TOPLISTS subpage - dev  >> verify that the expected menu items are displayed and clickable
- Location: /home/runner/work/nucleus-portal-tests/nucleus-portal-tests/tests/sanity/nucleus-portal/topListsPage.spec.ts:20:9

# Error details

```
TimeoutError: locator.click: Timeout 8000ms exceeded.
Call log:
  - waiting for locator('//a[.=\'Toplists\']')

    at /home/runner/work/nucleus-portal-tests/nucleus-portal-tests/tests/sanity/nucleus-portal/topListsPage.spec.ts:9:50
```

# Test source

```ts
   1 | import {test} from "../../fixtures/fixtures";
   2 | import {expect} from "@playwright/test";
   3 | import config from "../../../playwright.config";
   4 |
   5 | test.describe(`TOPLISTS subpage - ${config.name} `, {tag: [`@${config.name}`]}, () => {
   6 |
   7 |     test.beforeEach(async ({ToplistsPage, menuComponent}) => {
   8 |         await ToplistsPage.page.goto(`https://${config.baseUrl}`);
>  9 |         await menuComponent.menubarItem_Toplists.click();
     |                                                  ^ TimeoutError: locator.click: Timeout 8000ms exceeded.
   10 |         await ToplistsPage.page.mouse.move(20, 20) //get rid of the submenu popup
   11 |         await ToplistsPage.page.waitForLoadState();
   12 |     });
   13 |
   14 |     test('check the title and url', async ({ToplistsPage}) => {
   15 |         await ToplistsPage.page.waitForURL('**/toplists');
   16 |         expect(await ToplistsPage.page.title()).toBe('Nucleus Portal');
   17 |         expect(ToplistsPage.page.url()).toBe(`https://${config.baseUrl}/toplists`);
   18 |     });
   19 |
   20 |     test('verify that the expected menu items are displayed and clickable', async ({menuComponent}) => {
   21 |         await menuComponent.checkMenuItems();
   22 |         await menuComponent.checkDataPointItems();
   23 |     });
   24 |
   25 |     test('check the alert banner', async ({components}) => {
   26 |         await components.checkAlertBanner("Please use the name search or select a filter to view the Toplists");
   27 |     });
   28 |
   29 |     test('check comboBoxes', async ({components}) => {
   30 |         await test.step("Product combobox", async () => {
   31 |             const productComboboxItems: string[] = [
   32 |                 "Select an option",
   33 |                 "[QA] GeneralTestDomain"
   34 |             ]
   35 |             await components.checkCombobox(components.productCombobox, productComboboxItems);
   36 |         });
   37 |
   38 |         await test.step("Countries combobox", async () => {
   39 |             const headerOption: string = "Select an option";
   40 |             const countriesComboboxItems: string[] = [headerOption, ...components.countriesList];
   41 |             await components.checkCombobox(components.countriesCombobox, countriesComboboxItems);
   42 |         });
   43 |
   44 |         await test.step("Vertical combobox", async () => {
   45 |             const verticalComboboxItems: string[] = [
   46 |                 "Select an option",
   47 |                 "Casinos",
   48 |                 "Exchanges"
   49 |             ]
   50 |             await components.checkCombobox(components.verticalCombobox, verticalComboboxItems);
   51 |         });
   52 |
   53 |         await test.step("SubVertical combobox", async () => {
   54 |             const subVerticalComboboxItems: string[] = [
   55 |                 "Select an option",
   56 |                 "Default",
   57 |                 "Casino",
   58 |                 "Gambling",
   59 |                 "Sport"
   60 |             ]
   61 |             await components.checkCombobox(components.subVerticalCombobox, subVerticalComboboxItems);
   62 |         });
   63 |
   64 |         await test.step("Toplist Automation combobox", async () => {
   65 |             const toplistAutomationComboboxItems: string[] = [
   66 |                 "Select an option",
   67 |                 "Included",
   68 |                 "Excluded"
   69 |             ]
   70 |             await components.checkCombobox(components.toplistAutomationCombobox, toplistAutomationComboboxItems);
   71 |         });
   72 |     });
   73 |
   74 |     test('check the search by Country', async ({components}) => {
   75 |         await test.step("`QA Toplist` must be visible when selecting `Cyprus` on ccn.com", async () => {
   76 |             await components.clickItemFromCombobox(components.productCombobox, ["ccn.com"]);
   77 |             await expect(components.dataGrid).toBeVisible();
   78 |             await components.clickItemFromCombobox(components.countriesCombobox, ["Cyprus"]);
   79 |             await expect(components.dataGridCell("name", 1)).toContainText("QA Toplist");
   80 |             await expect(components.dataGridCell("domains", 1)).toContainText("ccn.com");
   81 |             await expect(components.dataGridCell("type", 1)).toContainText("Casinos");
   82 |             await expect(components.dataGridCell("subType", 1)).toContainText("Default");
   83 |             await expect(components.dataGridCell("status", 1)).toContainText("Published");
   84 |             await expect(components.dataGridCell("automation", 1)).toContainText("Included");
   85 |             await expect(components.dataGridCell("updatedAt", 1)).toContainText("/2025,");
   86 |         })
   87 |     });
   88 |
   89 |     test('pagination and Data Grid items', async ({components}) => {
   90 |         //  test.skip(process.env.TEST_ENV === 'staging', 'Not enough Toplists in staging env to test pagination');
   91 |
   92 |         await components.clickItemFromCombobox(components.productCombobox, ["ccn.com"]);
   93 |         await components.clickItemFromCombobox(components.countriesCombobox, ["Select an option"]);
   94 |         await test.step("Select 25 items per page", async () => {
   95 |             await components.checkRowsInDataGrid(25, ["name", "domains", "type", "subType", "status", "automation", "updatedAt"]);
   96 |             await expect(components.displayedRowsLabel).toContainText("1–25 of ");
   97 |         });
   98 |         await test.step("Select 15 items per page", async () => {
   99 |             await components.checkRowsInDataGrid(15, ["name", "domains", "type", "subType", "status", "automation", "updatedAt"]);
  100 |             await expect(components.displayedRowsLabel).toContainText("1–15 of ");
  101 |         });
  102 |         await test.step("Select 10 items per page", async () => {
  103 |             await components.checkRowsInDataGrid(10, ["name", "domains", "type", "subType", "status", "automation", "updatedAt"]);
  104 |             await expect(components.displayedRowsLabel).toContainText("1–10 of ");
  105 |         });
  106 |         await test.step("Check Next Page and Previous Page buttons", async () => {
  107 |             await components.nextPageButton.click();
  108 |             await expect(components.displayedRowsLabel).toContainText("11–20 of ");
  109 |             await components.nextPageButton.click();
```