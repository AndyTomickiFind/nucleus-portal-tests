# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: CRUD e2e API coins - dev >> CRUD operations executed sequentially
- Location: /home/runner/work/nucleus-portal-tests/nucleus-portal-tests/tests/api/nucleusPortalAPI/crud-api_coins.spec.ts:11:9

# Error details

```
Error: expect(received).toBe(expected) // Object.is equality

Expected: 201
Received: 401
    at /home/runner/work/nucleus-portal-tests/nucleus-portal-tests/tests/api/nucleusPortalAPI/crud-api_coins.spec.ts:37:38
    at /home/runner/work/nucleus-portal-tests/nucleus-portal-tests/tests/api/nucleusPortalAPI/crud-api_coins.spec.ts:13:9
```

# Test source

```ts
   1 | import {expect, test} from '@playwright/test';
   2 | import {logResponse} from '../../../src/logger';
   3 | import config from "../../../playwright.config";
   4 |
   5 | test.describe(`CRUD e2e API coins - ${config.name}`, {tag: [`@${config.name}`]}, () => {
   6 |     let coinId: string;
   7 |     let coinName: string;
   8 |     let updatedCoinName: string;
   9 |     let shortName: string;
   10 |
   11 |     test(`CRUD operations executed sequentially`, async ({request}, testInfo) => {
   12 |         //Step 1: Create a New Coin
   13 |         await test.step('Step 1: Create a New Coin', async () => {
   14 |             coinName = `[QA] RoboCoin - ${crypto.randomUUID()}`;
   15 |             shortName = `[QA]SHRT-${Math.floor(Math.random() * 1000)}`;
   16 |             const createResponse = await request.post(`https://${config.nucleusPortalServiceUri}/api/v1/coins`, {
   17 |                 headers: {
   18 |                     "Authorization": `${config.nucleusPortalToken}`,
   19 |                     "Content-Type": "application/json"
   20 |                 },
   21 |                 data: {
   22 |                     "name": [
   23 |                         {
   24 |                             "language": "en",
   25 |                             "text": coinName  // Setting coin name
   26 |                         }
   27 |                     ],
   28 |                     "shortName": shortName,
   29 |                     "logo": "no_logo", // Default logo
   30 |                     "priority": 1, // Default priority
   31 |                     "numberOfSites": 0 // Default number of sites
   32 |                 }
   33 |             });
   34 |
   35 |             await logResponse(createResponse, testInfo, "POST");
   36 |             const createStatusCode = createResponse.status();
>  37 |             expect(createStatusCode).toBe(201);
      |                                      ^ Error: expect(received).toBe(expected) // Object.is equality
   38 |
   39 |             const responseBody = await createResponse.json();
   40 |             coinId = responseBody._id;
   41 |             expect(coinId).toBeTruthy();
   42 |             expect.soft(responseBody.name[0].text).toBe(coinName);
   43 |             expect.soft(responseBody.shortName).toBe(shortName);
   44 |             console.log(`Created Coin ID: ${coinId}`);
   45 |         });
   46 |
   47 |         // Step 2: Verify the created coin appears in the list of all coins
   48 |         await test.step('Step 2: Verify the Coin is in the list of all coins', async () => {
   49 |             const getAllResponse = await request.get(`https://${config.nucleusPortalServiceUri}/api/v1/coins?page=0&size=100&sortField=createdAt&sortOrder=desc&shortName=SHRT`, {
   50 |                 headers: {
   51 |                     "Authorization": `${config.nucleusPortalToken}`,
   52 |                     "Content-Type": "application/json"
   53 |                 },
   54 |                 data: {
   55 |                     "name": [
   56 |                         {
   57 |                             "language": "en",
   58 |                             "text": coinName
   59 |                         }
   60 |                     ],
   61 |                     "shortName": shortName,
   62 |                     "logo": "no_logo",
   63 |                     "priority": 1,
   64 |                     "numberOfSites": 0
   65 |                 }
   66 |             });
   67 |
   68 |             await logResponse(getAllResponse, testInfo, "GET");
   69 |             const getAllStatusCode = getAllResponse.status();
   70 |             expect(getAllStatusCode).toBe(200);
   71 |
   72 |             const allCoinsResponse = await getAllResponse.json();
   73 |             const allCoins = allCoinsResponse.items;
   74 |
   75 |             const found = allCoins.some((coin) => coin._id === coinId);
   76 |             expect(found, `New Coin is in the list of all coins: ${coinId}`).toBe(true);
   77 |         });
   78 |
   79 |
   80 |         // Step 3: Verify the Created Coin with GET
   81 |         await test.step('Step 3: Verify the Created Coin with GET', async () => {
   82 |             const getCreatedResponse = await request.get(`https://${config.nucleusPortalServiceUri}/api/v1/coins/${coinId}`, {
   83 |                 headers: {
   84 |                     "Authorization": `${config.nucleusPortalToken}`
   85 |                 }
   86 |             });
   87 |
   88 |             await logResponse(getCreatedResponse, testInfo, "GET");
   89 |             const getCreatedStatusCode = getCreatedResponse.status();
   90 |             expect(getCreatedStatusCode).toBe(200);
   91 |
   92 |             const getCreatedBody = await getCreatedResponse.json();
   93 |             expect.soft(getCreatedBody).toHaveProperty('_id', coinId);
   94 |             expect.soft(getCreatedBody.name[0]).toHaveProperty('text', coinName);
   95 |             expect.soft(getCreatedBody).toHaveProperty('shortName', shortName);
   96 |             console.log(`Verified Coin via GET: ${coinId}`);
   97 |         });
   98 |
   99 |         // Step 4: Update the Coin using PATCH
  100 |         await test.step('Step 4: Update the Coin using PATCH', async () => {
  101 |             updatedCoinName = `${coinName} - Updated`;
  102 |
  103 |             const patchResponse = await request.patch(`https://${config.nucleusPortalServiceUri}/api/v1/coins/${coinId}`, {
  104 |                 headers: {
  105 |                     "Authorization": `${config.nucleusPortalToken}`,
  106 |                     "Content-Type": "application/json"
  107 |                 },
  108 |                 data: {
  109 |                     "name": [
  110 |                         {
  111 |                             "language": "en",
  112 |                             "text": `${updatedCoinName}`
  113 |                         }
  114 |                     ],
  115 |                     "shortName": `${shortName}-UPD`, // Example update to short name
  116 |                     "priority": 2 // Updated priority
  117 |                 }
  118 |             });
  119 |
  120 |             await logResponse(patchResponse, testInfo, "PATCH");
  121 |             const patchStatusCode = patchResponse.status();
  122 |             expect(patchStatusCode).toBe(204);
  123 |
  124 |             console.log(`Updated Coin Name via PATCH: ${updatedCoinName}`);
  125 |         });
  126 |
  127 |         // Step 5: Verify the Updated Coin with GET
  128 |         await test.step('Step 5: Verify the Updated Coin with GET', async () => {
  129 |             const getUpdatedResponse = await request.get(`https://${config.nucleusPortalServiceUri}/api/v1/coins/${coinId}`, {
  130 |                 headers: {
  131 |                     "Authorization": `${config.nucleusPortalToken}`
  132 |                 }
  133 |             });
  134 |
  135 |             await logResponse(getUpdatedResponse, testInfo, "GET");
  136 |             const getUpdatedStatusCode = getUpdatedResponse.status();
  137 |             expect(getUpdatedStatusCode).toBe(200);
```