# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: CRUD e2e API contactMethod - dev >> CRUD operations executed sequentially
- Location: /home/runner/work/nucleus-portal-tests/nucleus-portal-tests/tests/api/nucleusPortalAPI/crud-api_contactMethods.spec.ts:10:9

# Error details

```
Error: expect(received).toBe(expected) // Object.is equality

Expected: 201
Received: 401
    at /home/runner/work/nucleus-portal-tests/nucleus-portal-tests/tests/api/nucleusPortalAPI/crud-api_contactMethods.spec.ts:32:38
    at /home/runner/work/nucleus-portal-tests/nucleus-portal-tests/tests/api/nucleusPortalAPI/crud-api_contactMethods.spec.ts:12:9
```

# Test source

```ts
   1 | import {expect, test} from '@playwright/test';
   2 | import {logResponse} from '../../../src/logger';
   3 | import config from "../../../playwright.config";
   4 |
   5 | test.describe(`CRUD e2e API contactMethod - ${config.name}`, {tag: [`@${config.name}`]}, () => {
   6 |     let contactMethodId: string;
   7 |     let contactMethodName: string;
   8 |     let updatedContactMethodName: string;
   9 |
   10 |     test(`CRUD operations executed sequentially`, async ({request}, testInfo) => {
   11 |         // Step 1: Create a New Contact Method
   12 |         await test.step('Step 1: Create a New Contact Method', async () => {
   13 |             contactMethodName = `[QA] Contact Method created by robots ${crypto.randomUUID()}`;
   14 |             const createResponse = await request.post(`https://${config.nucleusPortalServiceUri}/api/v1/contact-methods`, {
   15 |                 headers: {
   16 |                     "Authorization": `${config.nucleusPortalToken}`,
   17 |                     "Content-Type": "application/json"
   18 |                 },
   19 |                 data: {
   20 |                     "name": [
   21 |                         {
   22 |                             //"_id": "60d6c7f9f9d4b2b6c1ec55ea",
   23 |                             "language": "en",
   24 |                             "text": `${contactMethodName}`
   25 |                         }
   26 |                     ]
   27 |                 }
   28 |             });
   29 |
   30 |             await logResponse(createResponse, testInfo, "POST");
   31 |             const createStatusCode = createResponse.status();
>  32 |             expect(createStatusCode).toBe(201);
      |                                      ^ Error: expect(received).toBe(expected) // Object.is equality
   33 |
   34 |             const responseBody = await createResponse.json();
   35 |             contactMethodId = responseBody._id;
   36 |             expect(contactMethodId).toBeTruthy();
   37 |             expect.soft(responseBody.name[0].text).toBe(contactMethodName);
   38 |             console.log(`Created Contact Method ID: ${contactMethodId}`);
   39 |         });
   40 |
   41 |         // Step 2: Verify the Created Contact Method with GET
   42 |         await test.step('Step 2: Verify the Created Contact Method with GET', async () => {
   43 |             const getCreatedResponse = await request.get(`https://${config.nucleusPortalServiceUri}/api/v1/contact-methods/${contactMethodId}`, {
   44 |                 headers: {
   45 |                     "Authorization": `${config.nucleusPortalToken}`
   46 |                 }
   47 |             });
   48 |
   49 |             await logResponse(getCreatedResponse, testInfo, "GET");
   50 |             const getCreatedStatusCode = getCreatedResponse.status();
   51 |             expect(getCreatedStatusCode).toBe(200);
   52 |
   53 |             const getCreatedBody = await getCreatedResponse.json();
   54 |             expect.soft(getCreatedBody).toHaveProperty('_id', contactMethodId);
   55 |             expect.soft(getCreatedBody.name[0]).toHaveProperty('text', contactMethodName);
   56 |             console.log(`Verified Contact Method via GET: ${contactMethodId}`);
   57 |         });
   58 |
   59 |         // Step 3: Update the Contact Method using PATCH
   60 |         await test.step('Step 3: Update the Contact Method using PATCH', async () => {
   61 |             updatedContactMethodName = `${contactMethodName} - Updated`;
   62 |
   63 |             const patchResponse = await request.patch(`https://${config.nucleusPortalServiceUri}/api/v1/contact-methods/${contactMethodId}`, {
   64 |                 headers: {
   65 |                     "Authorization": `${config.nucleusPortalToken}`,
   66 |                     "Content-Type": "application/json"
   67 |                 },
   68 |                 data: {
   69 |                     "name": [{
   70 |                         "_id": "679a16b88fcd7847637bba71",
   71 |                         "language": "en",
   72 |                         "text": `${updatedContactMethodName}`
   73 |                     }]
   74 |                 }
   75 |             });
   76 |
   77 |             await logResponse(patchResponse, testInfo, "PATCH");
   78 |             const patchStatusCode = patchResponse.status();
   79 |             expect(patchStatusCode).toBe(204);
   80 |
   81 |             console.log(`Updated Contact Method Name via PATCH: ${updatedContactMethodName}`);
   82 |         });
   83 |
   84 |         // Step 4: Verify the Updated Contact Method with GET
   85 |         await test.step('Step 4: Verify the Updated Contact Method with GET', async () => {
   86 |             const getUpdatedResponse = await request.get(`https://${config.nucleusPortalServiceUri}/api/v1/contact-methods/${contactMethodId}`, {
   87 |                 headers: {
   88 |                     "Authorization": `${config.nucleusPortalToken}`
   89 |                 }
   90 |             });
   91 |
   92 |             await logResponse(getUpdatedResponse, testInfo, "GET");
   93 |             const getUpdatedStatusCode = getUpdatedResponse.status();
   94 |             expect(getUpdatedStatusCode).toBe(200);
   95 |
   96 |             const getUpdatedBody = await getUpdatedResponse.json();
   97 |             expect(getUpdatedBody).toHaveProperty('_id', contactMethodId);
   98 |             expect(getUpdatedBody).toHaveProperty('name[0].text', updatedContactMethodName);
   99 |             console.log(`Verified Updated Contact Method via GET: ${contactMethodId}`);
  100 |         });
  101 |
  102 |         // Step 5: Delete the Contact Method
  103 |         await test.step('Step 5: Delete the Contact Method', async () => {
  104 |             const deleteResponse = await request.delete(`https://${config.nucleusPortalServiceUri}/api/v1/contact-methods/${contactMethodId}`, {
  105 |                 headers: {
  106 |                     "Authorization": `${config.nucleusPortalToken}`
  107 |                 }
  108 |             });
  109 |
  110 |             await logResponse(deleteResponse, testInfo, "DELETE");
  111 |             const deleteStatusCode = deleteResponse.status();
  112 |             expect(deleteStatusCode).toBe(204);
  113 |
  114 |             console.log(`Contact Method with ID ${contactMethodId} has been deleted successfully.`);
  115 |         });
  116 |
  117 |         // Step 6: Verify the Deletion with GET
  118 |         await test.step('Step 6: Verify the Deletion with GET', async () => {
  119 |             const getAfterDeleteResponse = await request.get(`https://${config.nucleusPortalServiceUri}/api/v1/contact-methods/${contactMethodId}`, {
  120 |                 headers: {
  121 |                     "Authorization": `${config.nucleusPortalToken}`
  122 |                 }
  123 |             });
  124 |
  125 |             await logResponse(getAfterDeleteResponse, testInfo, "GET");
  126 |             const getAfterDeleteStatusCode = getAfterDeleteResponse.status();
  127 |             expect(getAfterDeleteStatusCode).toBe(404); // Not Found
  128 |
  129 |             console.log(`Verified Contact Method Deletion (404): ${contactMethodId}`);
  130 |         });
  131 |     });
  132 | });
```