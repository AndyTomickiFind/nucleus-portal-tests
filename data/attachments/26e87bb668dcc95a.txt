# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: [DEV] Toplist auto updater - Toplist relevancy
- Location: /home/runner/work/nucleus-portal-tests/nucleus-portal-tests/tests/api/nucleusPortalAPI/auto-updater.spec.ts:6:5

# Error details

```
Error: User is authorized to access this resource

expect(received).not.toContain(expected) // indexOf

Expected value: not 401
Received array:     [401, 403]
    at /home/runner/work/nucleus-portal-tests/nucleus-portal-tests/tests/api/nucleusPortalAPI/auto-updater.spec.ts:31:83
    at /home/runner/work/nucleus-portal-tests/nucleus-portal-tests/tests/api/nucleusPortalAPI/auto-updater.spec.ts:13:5
```

# Test source

```ts
   1 | import {expect, test} from '@playwright/test';
   2 | import {logResponse} from '../../../src/logger';
   3 | import config from "../../../playwright.config";
   4 | import fs from "fs";
   5 |
   6 | test(`[${config.name.toUpperCase()}] Toplist auto updater - Toplist relevancy`, {
   7 |     annotation: {
   8 |         type: 'issue',
   9 |         description: 'https://findco.atlassian.net/browse/DEV-5629',  //[nucleus-portal-be] Toplists auto update process changes
  10 |     },
  11 | }, async ({request}, testInfo) => {
  12 |
  13 |     await test.step(`Set the toplist with default values`, async () => {
  14 |         const testData = JSON.parse(fs.readFileSync(`tests/api/testData_${process.env.TEST_ENV}/toplistRelevancy_default.json`, 'utf-8'));
  15 |         let toplistId;
  16 |         switch (process.env.TEST_ENV.toLowerCase()) {
  17 |             case "dev": {toplistId = "67c015ca36fcef3efd3a7d00";break}
  18 |             case "staging": {toplistId = "67e3c25b6eb14bd77a86cbde";break}
  19 |         }
  20 |
  21 |         const response = await request.patch(`https://${config.nucleusPortalServiceUri}/api/v2/toplists/${toplistId}`, {
  22 |             headers: {
  23 |                 "Authorization": `${config.nucleusPortalToken}`,
  24 |                 "Content-Type": "application/json"
  25 |             },
  26 |             params: {},
  27 |             data: testData
  28 |         });
  29 |
  30 |         await logResponse(response, testInfo, "PATCH");
> 31 |         expect.soft([401, 403], "User is authorized to access this resource").not.toContain(response.status());
     |                                                                                   ^ Error: User is authorized to access this resource
  32 |         expect(response.status(), "Response status is expected to be 204, was " + response.status()).toBe(204);
  33 |     });
  34 |
  35 |     await test.step(`Run Toplist relevancy automation`, async () => {
  36 |         const testData = JSON.parse(fs.readFileSync(`tests/api/testData_${process.env.TEST_ENV}/autoUpdater.json`, 'utf-8'));
  37 |         const response = await request.post(`https://${config.nucleusPortalServiceUri}/api/v1/toplists-auto-update`, {
  38 |             headers: {
  39 |                 "Authorization": `${config.nucleusPortalToken}`,
  40 |                 "Content-Type": "application/json"
  41 |             },
  42 |             params: {},
  43 |             data: testData
  44 |         });
  45 |
  46 |         await logResponse(response, testInfo, "POST");
  47 |         expect.soft([401, 403], "User is authorized to access this resource").not.toContain(response.status());
  48 |         expect(response.status(), "Response status is expected to be 200, was" + response.status()).toBe(200);
  49 |     });
  50 | });
```