# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: CRUD e2e API educationalResources - dev >> CRUD operations executed sequentially
- Location: /home/runner/work/nucleus-portal-tests/nucleus-portal-tests/tests/api/nucleusPortalAPI/crud-api_educationalResources.spec.ts:10:9

# Error details

```
Error: expect(received).toBe(expected) // Object.is equality

Expected: 201
Received: 401
    at /home/runner/work/nucleus-portal-tests/nucleus-portal-tests/tests/api/nucleusPortalAPI/crud-api_educationalResources.spec.ts:31:38
    at /home/runner/work/nucleus-portal-tests/nucleus-portal-tests/tests/api/nucleusPortalAPI/crud-api_educationalResources.spec.ts:12:9
```

# Test source

```ts
   1 | import { expect, test } from '@playwright/test';
   2 | import { logResponse } from '../../../src/logger';
   3 | import config from "../../../playwright.config";
   4 |
   5 | test.describe(`CRUD e2e API educationalResources - ${config.name}`, { tag: [`@${config.name}`] }, () => {
   6 |     let educationalResourceId: string;
   7 |     let educationalResourceName: string;
   8 |     let updatedEducationalResourceName: string;
   9 |
   10 |     test(`CRUD operations executed sequentially`, async ({ request }, testInfo) => {
   11 |         //  Step 1: Create a New Educational Resource
   12 |         await test.step('Step 1: Create a New Educational Resource', async () => {
   13 |             educationalResourceName = `[QA] Educational Resource created by robots ${crypto.randomUUID()}`;
   14 |             const createResponse = await request.post(`https://${config.nucleusPortalServiceUri}/api/v1/educational-resources`, {
   15 |                 headers: {
   16 |                     "Authorization": `${config.nucleusPortalToken}`,
   17 |                     "Content-Type": "application/json"
   18 |                 },
   19 |                 data: {
   20 |                     "name": [
   21 |                         {
   22 |                             "language": "en",
   23 |                             "text": `${educationalResourceName}`
   24 |                         }
   25 |                     ]
   26 |                 }
   27 |             });
   28 |
   29 |             await logResponse(createResponse, testInfo, "POST");
   30 |             const createStatusCode = createResponse.status();
>  31 |             expect(createStatusCode).toBe(201);
      |                                      ^ Error: expect(received).toBe(expected) // Object.is equality
   32 |
   33 |             const responseBody = await createResponse.json();
   34 |             educationalResourceId = responseBody._id;
   35 |             expect(educationalResourceId).toBeTruthy();
   36 |             expect.soft(responseBody.name[0].text).toBe(educationalResourceName);
   37 |             console.log(`Created Educational Resource ID: ${educationalResourceId}`);
   38 |         });
   39 |
   40 |         // **NEW: Step 2 - Verify the created resource appears in the list of all resources**
   41 |         await test.step('Step 2: Verify the Educational Resource is in the list of all resources', async () => {
   42 |             const getAllResponse = await request.get(`https://${config.nucleusPortalServiceUri}/api/v1/educational-resources`, {
   43 |                 headers: {
   44 |                     "Authorization": `${config.nucleusPortalToken}`
   45 |                 }
   46 |             });
   47 |
   48 |             await logResponse(getAllResponse, testInfo, "GET");
   49 |             const getAllStatusCode = getAllResponse.status();
   50 |             expect(getAllStatusCode).toBe(200);
   51 |
   52 |             const allResources = await getAllResponse.json();
   53 |             const found = allResources.some((resource) => resource._id === educationalResourceId);
   54 |             expect(found, "New Educational Resource is in the list of all resources: ${educationalResourceId}").toBe(true);
   55 |         });
   56 |
   57 |         // Step 3: Verify the Created Educational Resource with GET
   58 |         await test.step('Step 3: Verify the Created Educational Resource with GET', async () => {
   59 |             const getCreatedResponse = await request.get(`https://${config.nucleusPortalServiceUri}/api/v1/educational-resources/${educationalResourceId}`, {
   60 |                 headers: {
   61 |                     "Authorization": `${config.nucleusPortalToken}`
   62 |                 }
   63 |             });
   64 |
   65 |             await logResponse(getCreatedResponse, testInfo, "GET");
   66 |             const getCreatedStatusCode = getCreatedResponse.status();
   67 |             expect(getCreatedStatusCode).toBe(200);
   68 |
   69 |             const getCreatedBody = await getCreatedResponse.json();
   70 |             expect.soft(getCreatedBody).toHaveProperty('_id', educationalResourceId);
   71 |             expect.soft(getCreatedBody.name[0]).toHaveProperty('text', educationalResourceName);
   72 |             console.log(`Verified Educational Resource via GET: ${educationalResourceId}`);
   73 |         });
   74 |
   75 |         // Step 4: Update the Educational Resource using PATCH
   76 |         await test.step('Step 4: Update the Educational Resource using PATCH', async () => {
   77 |             updatedEducationalResourceName = `${educationalResourceName} - Updated`;
   78 |
   79 |             const patchResponse = await request.patch(`https://${config.nucleusPortalServiceUri}/api/v1/educational-resources/${educationalResourceId}`, {
   80 |                 headers: {
   81 |                     "Authorization": `${config.nucleusPortalToken}`,
   82 |                     "Content-Type": "application/json"
   83 |                 },
   84 |                 data: {
   85 |                     "name": [
   86 |                         {
   87 |                             "language": "en",
   88 |                             "text": `${updatedEducationalResourceName}`
   89 |                         }
   90 |                     ]
   91 |                 }
   92 |             });
   93 |
   94 |             await logResponse(patchResponse, testInfo, "PATCH");
   95 |             const patchStatusCode = patchResponse.status();
   96 |             expect(patchStatusCode).toBe(204);
   97 |
   98 |             console.log(`Updated Educational Resource Name via PATCH: ${updatedEducationalResourceName}`);
   99 |         });
  100 |
  101 |         // Step 5: Verify the Updated Educational Resource with GET
  102 |         await test.step('Step 5: Verify the Updated Educational Resource with GET', async () => {
  103 |             const getUpdatedResponse = await request.get(`https://${config.nucleusPortalServiceUri}/api/v1/educational-resources/${educationalResourceId}`, {
  104 |                 headers: {
  105 |                     "Authorization": `${config.nucleusPortalToken}`
  106 |                 }
  107 |             });
  108 |
  109 |             await logResponse(getUpdatedResponse, testInfo, "GET");
  110 |             const getUpdatedStatusCode = getUpdatedResponse.status();
  111 |             expect(getUpdatedStatusCode).toBe(200);
  112 |
  113 |             const getUpdatedBody = await getUpdatedResponse.json();
  114 |             expect(getUpdatedBody).toHaveProperty('_id', educationalResourceId);
  115 |             expect(getUpdatedBody.name[0]).toHaveProperty('text', updatedEducationalResourceName);
  116 |             console.log(`Verified Updated Educational Resource via GET: ${educationalResourceId}`);
  117 |         });
  118 |
  119 |         // Step 6: Delete the Educational Resource
  120 |         await test.step('Step 6: Delete the Educational Resource', async () => {
  121 |             const deleteResponse = await request.delete(`https://${config.nucleusPortalServiceUri}/api/v1/educational-resources/${educationalResourceId}`, {
  122 |                 headers: {
  123 |                     "Authorization": `${config.nucleusPortalToken}`
  124 |                 }
  125 |             });
  126 |
  127 |             await logResponse(deleteResponse, testInfo, "DELETE");
  128 |             const deleteStatusCode = deleteResponse.status();
  129 |             expect(deleteStatusCode).toBe(204);
  130 |
  131 |             console.log(`Educational Resource with ID ${educationalResourceId} has been deleted successfully.`);
```